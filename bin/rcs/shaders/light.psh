	uniform sampler2D tex0;
	varying vec3 normal;
	varying vec4 position;

	void main()
	{
		vec4 specular = vec4(0.0);
		vec4 diffuse = vec4(texture2D(tex0, gl_TexCoord[0].st).rgb,1.0) * gl_LightSource[0].diffuse;
		vec4 pos = gl_ModelViewMatrix * position;
		vec3 lightVector = gl_LightSource[0].position.xyz - pos.xyz;
		vec3 norm = normalize(normal);
		float dist = length(lightVector);
		float attenuation = 1.0 / (gl_LightSource[0].constantAttenuation +
															gl_LightSource[0].linearAttenuation * dist +
															gl_LightSource[0].quadraticAttenuation * dist * dist);
		lightVector = normalize(lightVector);
		float nxDir = max(0.0, dot(norm, lightVector));
		diffuse = diffuse * nxDir * attenuation;

		if(nxDir != 0.0)
		{
			vec3 halfVector = normalize(gl_LightSource[0].halfVector.xyz);
			float nxHalf = max(0.0,dot(norm, halfVector));
			float specularPower = pow(nxHalf, gl_FrontMaterial.shininess);
			specular = gl_LightSource[0].specular * specularPower * attenuation * gl_FrontMaterial.specular;
		}
//		gl_FragColor = gl_LightSource[0].ambient + (diffuse * vec4(texColor.rgb,1.0)) + (specular * texColor.a);
		gl_FragColor = gl_LightSource[0].ambient +  diffuse;
	}


